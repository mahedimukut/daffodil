generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String? // Hashed password for email-based login
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "admin" or "user"
  createdAt     DateTime  @default(now())

  accounts   Account[]
  sessions   Session[]
  favorites  Favorite[]
  bookings   Booking[]
  properties Property[] @relation("UserProperties")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Property {
  id        String   @id @default(cuid())
  name      String
  price     String
  bedrooms  Int
  toilets   Int
  balcony   Boolean
  sqft      Int
  image     String
  details   String
  location  String
  available String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerId String?
  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull, name: "UserProperties")

  favorites Favorite[]
  bookings  Booking[]
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
}

model Booking {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  startDate  DateTime
  endDate    DateTime
  status     String   @default("pending") // pending, confirmed, canceled
  createdAt  DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}
